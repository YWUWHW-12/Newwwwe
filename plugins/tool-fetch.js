const { cmd, commands } = require('../command');
const { fetchJson } = require('../lib/functions');
const { readEnv } = require('../lib/database');

cmd({
    pattern: "fetch",
    alias: ["get", "api"],
    desc: "Fetch data from a provided URL or API",
    category: "main",
    react: "üåê",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, args, reply }) => {
    try {
        // Config ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä LANGUAGE ‡∂ö‡∑í‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©
        const messages = {
            sinhala: {
                noUrl: "‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∑ù ‡∑Ä‡∑í‡∂∏‡∑É‡∑î‡∂∏‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.",
                invalidUrl: "‚ùå URL ‡∂ë‡∂ö http:// ‡∑Ñ‡∑ù https:// ‡∑É‡∂∏‡∂ü ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.",
                result: (content) => `üîç *‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠‡∑ä ‡∂Ø‡∂≠‡∑ä‡∂≠*:\n\`\`\`${content.slice(0, 2048)}\`\`\``,
                error: (e) => `‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è:\n${e.message}`
            },
            english: {
                noUrl: "‚ùå Please provide a valid URL or query.",
                invalidUrl: "‚ùå URL must start with http:// or https://.",
                result: (content) => `üîç *Fetched Data*:\n\`\`\`${content.slice(0, 2048)}\`\`\``,
                error: (e) => `‚ùå An error occurred:\n${e.message}`
            }
        };

        const msg = messages[language] || messages.english; // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑ú‡∂≠‡∑ä ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í default ‡∂Ω‡∑ô‡∑É

        const q = args.join(' ').trim(); // Extract the URL or API query
        if (!q) return reply(msg.noUrl);

        if (!/^https?:\/\//.test(q)) return reply(msg.invalidUrl);

        const data = await fetchJson(q); // Use your fetchJson utility function to get data
        const content = JSON.stringify(data, null, 2);

        await conn.sendMessage(from, {
            text: msg.result(content),
            contextInfo: {
                mentionedJid: [m.sender],
                forwardingScore: 999,
                isForwarded: true,
                forwardingSourceMessage: language === 'sinhala' ? '‡∂î‡∂∂‡∂ú‡∑ö ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏' : 'Your Data Request',
            }
        }, { quoted: mek });
    } catch (e) {
        console.error("Error in fetch command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error(e));
    }
});
