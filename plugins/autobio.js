const { cmd } = require('../command');
const config = require('../config');
const { updateEnv, readEnv } = require('../lib/database');

let autoBioInterval;

cmd({
    pattern: "setbio",
    desc: "Enable or disable the AutoBIO feature.",
    category: "owner",
    filename: __filename
}, async (conn, mek, m, { from, isOwner, reply }) => {
    // Config ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä LANGUAGE ‡∂ö‡∑í‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è
    const env = await readEnv();
    const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

    // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©
    const messages = {
        sinhala: {
            notOwner: "‚ùå ‡∂î‡∂∂ ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∂±‡∑ú‡∑Ä‡∑ö!",
            enabled: "üë®‚Äçüíª AutoBIO ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∑è‡∂Ç‡∂ú‡∂∫ *‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª ‡∂á‡∂≠*! üîÑ",
            disabled: "üë®‚Äçüíª AutoBIO ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∑è‡∂Ç‡∂ú‡∂∫ *‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª ‡∂á‡∂≠*! üö´"
        },
        english: {
            notOwner: "‚ùå You are not the owner!",
            enabled: "üë®‚Äçüíª AutoBIO feature has been *enabled*! üîÑ",
            disabled: "üë®‚Äçüíª AutoBIO feature has been *disabled*! üö´"
        }
    };

    const msg = messages[language] || messages.english; // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑ú‡∂≠‡∑ä ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í default ‡∂Ω‡∑ô‡∑É

    if (!isOwner) return reply(msg.notOwner);

    config.autoBioEnabled = !config.autoBioEnabled;

    if (config.autoBioEnabled) {
        reply(msg.enabled);
        startAutoBio(conn, language);
    } else {
        reply(msg.disabled);
        stopAutoBio();
    }
});

// 2. Start AutoBIO
function startAutoBio(conn, language) {
    // Clear any existing interval to avoid duplicates
    if (autoBioInterval) clearInterval(autoBioInterval);

    // Bio text based on language
    const bioMessages = {
        sinhala: (time) => `üíõùóüùó¢ùóó-ùó´-ùó†ùóó ‡∂∂‡∑ú‡∂ß‡∑äüë®‚Äçüíª ‡∂∞‡∑è‡∑Ä‡∂±‡∂∫ ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä... ‡∂∏‡∑ô‡∂∏ ‡∂ú‡∑í‡∂´‡∑î‡∂∏‡∑öüíõ${time}üë®‚Äçüíª‚öúÔ∏èùêèùê®ùê∞ùêûùê´ùêûùêù ùêÅùê≤ : ¬ÆùêÇùêòùêÅùêÑùêë ùêÉùêàùêçùêî ùêàùêÉ`,
        english: (time) => `üíõùóüùó¢ùóó-ùó´-ùó†ùóó ùòΩùôäùôèüë®‚Äçüíª ùôçùôêùôâùôâùôÑùôâùôÇ... ùôÑùôâ ùôèùôÉùôÑùôé ùòºùòæùôäùôêùôâùôèüíõ${time}üë®‚Äçüíª‚öúÔ∏èùêèùê®ùê∞ùêûùê´ùêûùêù ùêÅùê≤ : ¬ÆùêÇùêòùêÅùêÑùêë ùêÉùêàùêçùêî ùêàùêÉ`
    };

    const bioTextFunc = bioMessages[language] || bioMessages.english;

    // Set a new interval to update the bio every minute
    autoBioInterval = setInterval(async () => {
        const time = new Date().toLocaleTimeString();  // Get the current time
        const bioText = bioTextFunc(time);  // Set the bio text with time
        await conn.updateProfileStatus(bioText);  // Update the bot's bio
    }, 60 * 1000);  // 1 minute interval
}

// 3. Stop AutoBIO
function stopAutoBio() {
    if (autoBioInterval) {
        clearInterval(autoBioInterval);  // Stop the interval
        autoBioInterval = null;
        console.log("üë®‚Äçüíª AutoBIO feature stopped.");  // Log the stopping of the feature
    }
}
