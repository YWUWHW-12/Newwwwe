const { cmd, commands } = require('../command');
const yts = require('yt-search');
const { fetchJson } = require('../lib/functions');

// Ringtone List with 50 Entries
cmd({
    pattern: "sring2",
    alias: ["tonesaa", "phonetonesaa"],
    desc: "Show ringtone list",
    category: "main",
    react: "üé∂",
    filename: __filename
},
async (conn, mek, m, { from, quoted, reply }) => {
    try {
        const status = `*üíöHASHI MD RINGTONEüíö*

‚ï≠‚îÅ‚îÅ„Äî*üíö${new Date().getHours() < 12 ? 'üåÑ ‡∑É‡∑î‡∂∂ ‡∂ã‡∂Ø‡∑ë‡∑É‡∂±‡∂ö‡∑ä üåÑ' : 'üåõ ‡∑É‡∑î‡∂∂ ‡∂ª‡∑è‡∂≠‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∂ö‡∑ä üåõ'}üíö*„Äï‚îÅ‚îÅ‚îà‚ä∑
ùüè. ùêêùêÆùêûùê´ùê§ùê≤
ùüê. ùêêùêîùêÑùêëùêÑùêë ùêêùêîùêÑùêëùêÑùêåùêéùêí
ùüë. ùêáùêäùüíùüï - ùêêùêÆùêûùê´ùê≤
ùüí. ùêêùêÆùêûùê´ùê≤-ùê¨ùê¶ùê¨-ùê≠ùê®ùêßùêû
ùüì. ùêêùêÆùêûùê´ùê¢ùêùùêö
ùüî. ùêêùêÆùêûùê´ùê¢ùêùùê®
ùüï. ùêêùêÆùêûùê´ùêûùê´
ùüñ. ùêêùêÆùêûùê´ùêûùê´ùê¨ùê¢ùêß
ùüó. ùüñùêõùê¢ùê≠ ùêÄùê´ùê≠ ùêéùêü ùêìùê°ùêûùêùùê´ùêûùê¨ùê¨
ùüèùüé. ùüñùêõùê¢ùê≠ùêöùê´ùê≠ùê®ùêüùê≠ùê°ùêûùêùùê´ùêûùê¨ùê¨ùüê
ùüèùüè. ùêãùêÆùêßùêöùê¨ ùêÖùêÆùê≠ùêÆùê´ùêû
ùüèùüê. ùêÑùê™ùêÆùêûùê¨ùê≠ùê´ùê¢ùêö ùêÜùê¢ùê´ùê•ùê¨ ùêìùê®ùêßùêû
ùüèùüë. ùêèùê®ùêßùê≤ ùêíùê∞ùêöùê†
ùüèùüí. ùêåùê¢ùê•ùê§ùê¨ùê°ùêöùê§ùêû ùêëùêöùêúùêû
ùüèùüì. ùêÑùêØùê¢ùê• ùêÑùêßùêúùê°ùêöùêßùê≠ùê´ùêûùê¨ùê¨
ùüèùüî. ùêòùêöùê≤
ùüèùüï. ùêáùêÆùê¨ùê° ùêçùê®ùê∞ ùêåùêûùê≠ùêöùê• ùêçùê®ùê∞
ùüèùüñ. ùêåùê•ùê© ùêòùêöùê≤
ùüèùüó. ùêÅùêàùêÅùêàùêÉùêÉùêò-ùêÅùêéùêéùêèÔøΩ{Y
ùüêùüé. ùêÄùêùùêØùêûùêßùê≠ùêÆùê´ùêû
ùüêùüè. ùêíùêöùêßùêùùê∞ùê¢ùêúùê°ùêûùê¨
ùüêùüê. ùêÖùê´ùê¢ùêûùêßùêùùê¨ùê°ùê¢ùê©
ùüêùüë. ùêëùêûùêùùê°ùêûùêöùê´ùê≠ - ùêíùê°ùê°
ùüêùüí. ùêÖùê•ùêÆùê≠ùê≠ùêûùê´ùêõùêûùêûùê©
ùüêùüì. ùêçùêÆùê´ùê¨ùêû ùêëùêûùêùùê°ùêûùêöùê´ùê≠
ùüêùüî. ùêíùêÆùêßùê´ùê¢ùê¨ùêû ùêåùêûùê•ùê®ùêùùê≤
ùüêùüï. ùêÇùê´ùê≤ùê¨ùê≠ùêöùê• ùêÉùê´ùê®ùê©ùê¨
ùüêùüñ. ùêåùê®ùê´ùêßùê¢ùêßùê† ùêÅùê´ùêûùêûùê≥ùêû
ùüêùüó. ùêÜùêöùê•ùêöùê±ùê≤ ùêçùê®ùê≠ùêû
ùüëùüé. ùêíùê®ùêüùê≠ ùêÑùêúùê°ùê®
ùüëùüè. ùêèùê¢ùêöùêßùê® ùêñùê°ùê¢ùê¨ùê©ùêûùê´
ùüëùüê. ùêçùêöùê≠ùêÆùê´ùêû ùêÇùêöùê•ùê•
ùüëùüë. ùêÉùê¢ùê†ùê¢ùê≠ùêöùê• ùêÉùêöùê∞ùêß
ùüëùüí. ùêíùê¢ùê•ùêûùêßùê≠ ùêèùêÆùê•ùê¨ùêû
ùüëùüì. ùêéùêúùêûùêöùêß ùêñùêöùêØùêû
ùüëùüî. ùêíùê≠ùêöùê´ùê•ùê¢ùê†ùê°ùê≠ ùêÇùê°ùê¢ùê¶ùêû
ùüëùüï. ùêíùê©ùê´ùê¢ùêßùê† ùêÅùê•ùê®ùê®ùê¶
ùüëùüñ. ùêåùê¢ùêùùêßùê¢ùê†ùê°ùê≠ ùêíùêûùê´ùêûùêßùêöùêùùêû
ùüëùüó. ùêÜùêûùêßùê≠ùê•ùêû ùêëùêöùê¢ùêß
ùüíùüé. ùêåùê≤ùê¨ùê≠ùê¢ùêú ùêìùê®ùêßùêû
ùüíùüè. ùêÖùê®ùê´ùêûùê¨ùê≠ ùêñùê¢ùêßùêù
ùüíùüê. ùêÇùê®ùê¨ùê¶ùê¢ùêú ùêÅùêûùêöùê≠
ùüíùüë. ùêáùêöùê´ùê¶ùê®ùêßùê≤ ùêëùê¢ùê¨ùêû
ùüíùüí. ùêèùêûùêöùêúùêûùêüùêÆùê• ùêïùê¢ùêõùêû
ùüíùüì. ùêñùê¢ùêßùê≠ùêûùê´ ùêÖùê´ùê®ùê¨ùê≠
ùüíùüî. ùêíùêÆùê¶ùê¶ùêûùê´ ùêÜùê•ùê®ùê∞
ùüíùüï. ùêÄùêÆùê≠ùêÆùê¶ùêß ùêãùêûùêöùêü
ùüíùüñ. ùêÇùêûùê•ùêûùê¨ùê≠ùê¢ùêöùê• ùêíùê®ùêÆùêßùêù
ùüíùüó. ùêìùê∞ùê¢ùê•ùê¢ùê†ùê°ùê≠ ùêÉùêöùêßùêúùêû
ùüìùüé. ùêÑùê≠ùêûùê´ùêßùêöùê• ùêçùê®ùê≠ùêû
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
*Reply with a number to download*
> ‚öúÔ∏èùêèùê®ùê∞ùêûùê´ùêûùêù ùêÅùê≤ : ¬Æùêåùêë ùêãùêÄùêäùêíùêàùêÉùêî üíö`;

        const sentMsg = await conn.sendMessage(from, { 
            image: { url: `https://i.imgur.com/ZdEQXYr.jpeg` },
            caption: status
        }, { quoted: mek });

        const messageID = sentMsg.key.id;

        // Listen for reply
        conn.ev.on('messages.upsert', async (messageUpdate) => {
            const response = messageUpdate.messages[0];
            if (!response.message) return;
            
            const messageType = response.message.conversation || response.message.extendedTextMessage?.text;
            const isReplyToSentMsg = response.message.extendedTextMessage && 
                                   response.message.extendedTextMessage.contextInfo.stanzaId === messageID;

            if (isReplyToSentMsg) {
                const ringtones = {
                    '1': 'Querky ringtone',
                    '2': 'QUERER QUEREMOS ringtone',
                    '3': 'HK47 Query ringtone',
                    '4': 'Query sms tone',
                    '5': 'Querida ringtone',
                    '6': 'Querido ringtone',
                    '7': 'Querer ringtone',
                    '8': 'Querersin ringtone',
                    '9': '8bit Art Of Thedress ringtone',
                    '10': '8bitart ofthedress2 ringtone',
                    '11': 'Lunas Future ringtone',
                    '12': 'Equestria Girls Tone',
                    '13': 'Pony Swag ringtone',
                    '14': 'Milkshake Race ringtone',
                    '15': 'Evil Enchantress ringtone',
                    '16': 'Yay mlp ringtone',
                    '17': 'Hush Now Metal Now ringtone',
                    '18': 'Mlp Yay ringtone',
                    '19': 'BIBIDDY-BOOPY ringtone',
                    '20': 'Adventure ringtone mlp',
                    '21': 'Sandwiches ringtone mlp',
                    '22': 'Friendship ringtone mlp',
                    '23': 'Redheart Shh ringtone',
                    '24': 'Flutterbeep ringtone',
                    '25': 'Nurse Redheart ringtone',
                    '26': 'Sunrise Melody ringtone',
                    '27': 'Crystal Drops ringtone',
                    '28': 'Morning Breeze ringtone',
                    '29': 'Galaxy Note ringtone',
                    '30': 'Soft Echo ringtone',
                    '31': 'Piano Whisper ringtone',
                    '32': 'Nature Call ringtone',
                    '33': 'Digital Dawn ringtone',
                    '34': 'Silent Pulse ringtone',
                    '35': 'Ocean Wave ringtone',
                    '36': 'Starlight Chime ringtone',
                    '37': 'Spring Bloom ringtone',
                    '38': 'Midnight Serenade ringtone',
                    '39': 'Gentle Rain ringtone',
                    '40': 'Mystic Tone ringtone',
                    '41': 'Forest Wind ringtone',
                    '42': 'Cosmic Beat ringtone',
                    '43': 'Harmony Rise ringtone',
                    '44': 'Peaceful Vibe ringtone',
                    '45': 'Winter Frost ringtone',
                    '46': 'Summer Glow ringtone',
                    '47': 'Autumn Leaf ringtone',
                    '48': 'Celestial Sound ringtone',
                    '49': 'Twilight Dance ringtone',
                    '50': 'Eternal Note ringtone'
                };

                if (!ringtones[messageType]) {
                    await conn.sendMessage(from, { text: "*Invalid ringtone number*" }, { quoted: response });
                    return;
                }

                await conn.sendMessage(from, { react: { text: '‚¨áÔ∏è', key: response.key } });

                // Search and download
                const search = await yts(ringtones[messageType]);
                const data = search.videos[0];
                const url = data.url;
                const down = await fetchJson(`https://bandahealimaree-api-ytdl.hf.space/api/ytmp3?url=${url}`);
                const downloadUrl = down.download.downloadUrl;

                await conn.sendMessage(from, { react: { text: '‚¨ÜÔ∏è', key: response.key } });

                // Send audio
                await conn.sendMessage(from, { 
                    audio: { url: downloadUrl }, 
                    mimetype: "audio/mpeg",
                    contextInfo: {
                        externalAdReply: {
                            title: data.title,
                            body: "Ringtone Download",
                            mediaType: 1,
                            sourceUrl: url,
                            thumbnailUrl: "https://i.imgur.com/ZdEQXYr.jpeg",
                            renderLargerThumbnail: true,
                            showAdAttribution: true
                        }
                    }
                }, { quoted: response });
            }
        });

    } catch (e) {
        console.error("Error:", e);
        reply(`An error occurred: ${e.message}`);
    }
});