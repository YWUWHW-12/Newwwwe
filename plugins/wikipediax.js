const config = require('../config');
const { cmd, commands } = require('../command');
const wiki = require('wikipedia');
const { readEnv } = require('../lib/database');

// Define the Wikipedia search command
cmd({
    pattern: "wiki",
    desc: "Search Wikipedia for information",
    category: "main",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        // Config ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä LANGUAGE ‡∂ö‡∑í‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©
        const messages = {
            sinhala: {
                noQuery: '‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∑Ä‡∑í‡∂∏‡∑É‡∑î‡∂∏‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.',
                replyText: (q, summary) => `
*üìö ùêáùêÄùêíùêáùêà ‡∑Ä‡∑í‡∂ö‡∑í‡∂¥‡∑ì‡∂©‡∑í‡∂∫‡∑è üìö*

> üîç *‡∑Ä‡∑í‡∂∏‡∑É‡∑î‡∂∏*: _${q}_

> üí¨ *‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä*: _${summary.title}_

> üìù *‡∑É‡∑è‡∂ª‡∑è‡∂Ç‡∑Å‡∂∫*: _${summary.extract}_

> üîó *URL*: ${summary.content_urls.desktop.page}

> „ãõÔ∏é ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è  ·¥ç Ä   ü·¥Ä·¥ãÍú±…™·¥Ö·¥ú ·∂ú·µí·µà·µâ ≥`,
                error: (e) => `‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è: ${e.message}`
            },
            english: {
                noQuery: 'Please provide a search query.',
                replyText: (q, summary) => `
*üìö ùêáùêÄùêíùêáùêà ùêñùêàùêäùêàùêèùêÑùêÉùêàùêÄ üìö*

> üîç *Query*: _${q}_

> üí¨ *Title*: _${summary.title}_

> üìù *Summary*: _${summary.extract}_

> üîó *URL*: ${summary.content_urls.desktop.page}

> „ãõÔ∏é ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è  ·¥ç Ä   ü·¥Ä·¥ãÍú±…™·¥Ö·¥ú ·∂ú·µí·µà·µâ ≥`,
                error: (e) => `Error: ${e.message}`
            }
        };

        const msg = messages[language] || messages.english; // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑ú‡∂≠‡∑ä ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í default ‡∂Ω‡∑ô‡∑É

        // Check if a query was provided
        if (!q) {
            return reply(msg.noQuery);
        }

        // Fetch summary from Wikipedia
        const summary = await wiki.summary(q);
        
        // Send the reply with the thumbnail image
        await conn.sendMessage(from, { 
            image: { url: summary.originalimage.source }, 
            caption: msg.replyText(q, summary) 
        }, { quoted: mek });

    } catch (e) {
        console.log(e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error(e));
    }
});
