const { sleep } = require('../lib/functions');
const { cmd, commands } = require('../command');
const { readEnv } = require('../lib/database');

cmd({
    pattern: "rcolor",
    desc: "Generate a random color with name and code.",
    category: "utility",
    filename: __filename,
}, 
async (conn, mek, m, { reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { result: (name, hex) => `üé® *‡∂∫‡∂∏‡∑ä ‡∂∫‡∂∏‡∑ä ‡∑Ä‡∂ª‡∑ä‡∂´‡∂∫:* \n‡∂±‡∂∏: ${name}\n‡∂ö‡∑ö‡∂≠‡∂∫: ${hex}`, error: "‚ùå ‡∂∫‡∂∏‡∑ä ‡∂∫‡∂∏‡∑ä ‡∑Ä‡∂ª‡∑ä‡∂´‡∂∫‡∂ö‡∑ä ‡∂¢‡∂±‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." },
            english: { result: (name, hex) => `üé® *Random Color:* \nName: ${name}\nCode: ${hex}`, error: "‚ùå An error occurred while generating the random color." }
        };
        const msg = messages[language] || messages.english;

        const colorNames = ["Red", "Green", "Blue", "Yellow", "Orange", "Purple", "Pink", "Brown", "Black", "White", "Gray", "Cyan", "Magenta", "Violet", "Indigo", "Teal", "Lavender", "Turquoise"];
        const randomColorHex = "#" + Math.floor(Math.random()*16777215).toString(16);
        const randomColorName = colorNames[Math.floor(Math.random() * colorNames.length)];

        reply(msg.result(randomColorName, randomColorHex));
    } catch (e) {
        console.error("Error in .randomcolor command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "binary",
    desc: "Convert text into binary format.",
    category: "utility",
    filename: __filename,
}, 
async (conn, mek, m, { args, reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { noText: "‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∂‡∂∫‡∑í‡∂±‡∂ª‡∑í ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∑Ö ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.", result: (binary) => `üîë *‡∂∂‡∂∫‡∑í‡∂±‡∂ª‡∑í ‡∂±‡∑í‡∂ª‡∑ñ‡∂¥‡∂´‡∂∫:* \n${binary}`, error: "‚ùå ‡∂∂‡∂∫‡∑í‡∂±‡∂ª‡∑í ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." },
            english: { noText: "‚ùå Please provide the text to convert to binary.", result: (binary) => `üîë *Binary Representation:* \n${binary}`, error: "‚ùå An error occurred while converting to binary." }
        };
        const msg = messages[language] || messages.english;

        if (!args.length) return reply(msg.noText);

        const textToConvert = args.join(" ");
        const binaryText = textToConvert.split('').map(char => `00000000${char.charCodeAt(0).toString(2)}`.slice(-8)).join(' ');

        reply(msg.result(binaryText));
    } catch (e) {
        console.error("Error in .binary command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "dbinary",
    desc: "Decode binary string into text.",
    category: "utility",
    filename: __filename,
}, 
async (conn, mek, m, { args, reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { noText: "‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∑í‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂∂‡∂∫‡∑í‡∂±‡∂ª‡∑í ‡∂Ω‡∂∫‡∑í‡∂±‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.", result: (text) => `üîì *‡∑Ä‡∑í‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑Ö ‡∂¥‡∑ô‡∑Ö:* \n${text}`, error: "‚ùå ‡∂∂‡∂∫‡∑í‡∂±‡∂ª‡∑í ‡∂Ω‡∂∫‡∑í‡∂±‡∂∫ ‡∑Ä‡∑í‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." },
            english: { noText: "‚ùå Please provide the binary string to decode.", result: (text) => `üîì *Decoded Text:* \n${text}`, error: "‚ùå An error occurred while decoding the binary string." }
        };
        const msg = messages[language] || messages.english;

        if (!args.length) return reply(msg.noText);

        const binaryString = args.join(" ");
        const textDecoded = binaryString.split(' ').map(bin => String.fromCharCode(parseInt(bin, 2))).join('');

        reply(msg.result(textDecoded));
    } catch (e) {
        console.error("Error in .binarydecode command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "base64",
    desc: "Encode text into Base64 format.",
    category: "utility",
    filename: __filename,
}, 
async (conn, mek, m, { args, reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { noText: "‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª Base64 ‡∂∂‡∑Ä‡∂ß ‡∑É‡∂Ç‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∑Ö ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.", result: (encoded) => `üîë *‡∑É‡∂Ç‡∂ö‡∑ö‡∂≠‡∑í‡∂≠ Base64 ‡∂¥‡∑ô‡∑Ö:* \n${encoded}`, error: "‚ùå Base64 ‡∂∂‡∑Ä‡∂ß ‡∑É‡∂Ç‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." },
            english: { noText: "‚ùå Please provide the text to encode into Base64.", result: (encoded) => `üîë *Encoded Base64 Text:* \n${encoded}`, error: "‚ùå An error occurred while encoding the text into Base64." }
        };
        const msg = messages[language] || messages.english;

        if (!args.length) return reply(msg.noText);

        const textToEncode = args.join(" ");
        const encodedText = Buffer.from(textToEncode).toString('base64');

        reply(msg.result(encodedText));
    } catch (e) {
        console.error("Error in .base64 command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "unbase64",
    desc: "Decode Base64 encoded text.",
    category: "utility",
    filename: __filename,
}, 
async (conn, mek, m, { args, reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { noText: "‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∑í‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß Base64 ‡∑É‡∂Ç‡∂ö‡∑ö‡∂≠‡∑í‡∂≠ ‡∂¥‡∑ô‡∑Ö ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.", result: (decoded) => `üîì *‡∑Ä‡∑í‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑Ö ‡∂¥‡∑ô‡∑Ö:* \n${decoded}`, error: "‚ùå Base64 ‡∂¥‡∑ô‡∑Ö ‡∑Ä‡∑í‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." },
            english: { noText: "‚ùå Please provide the Base64 encoded text to decode.", result: (decoded) => `üîì *Decoded Text:* \n${decoded}`, error: "‚ùå An error occurred while decoding the Base64 text." }
        };
        const msg = messages[language] || messages.english;

        if (!args.length) return reply(msg.noText);

        const base64Text = args.join(" ");
        const decodedText = Buffer.from(base64Text, 'base64').toString('utf-8');

        reply(msg.result(decodedText));
    } catch (e) {
        console.error("Error in .unbase64 command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "urlencode",
    desc: "Encode text into URL encoding.",
    category: "utility",
    filename: __filename,
}, 
async (conn, mek, m, { args, reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { noText: "‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª URL ‡∑É‡∂Ç‡∂ö‡∑ö‡∂≠‡∂±‡∂∫‡∂ß ‡∂¥‡∑ô‡∑Ö ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.", result: (encoded) => `üîë *‡∑É‡∂Ç‡∂ö‡∑ö‡∂≠‡∑í‡∂≠ URL ‡∂¥‡∑ô‡∑Ö:* \n${encoded}`, error: "‚ùå ‡∂¥‡∑ô‡∑Ö ‡∑É‡∂Ç‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." },
            english: { noText: "‚ùå Please provide the text to encode into URL encoding.", result: (encoded) => `üîë *Encoded URL Text:* \n${encoded}`, error: "‚ùå An error occurred while encoding the text." }
        };
        const msg = messages[language] || messages.english;

        if (!args.length) return reply(msg.noText);

        const textToEncode = args.join(" ");
        const encodedText = encodeURIComponent(textToEncode);

        reply(msg.result(encodedText));
    } catch (e) {
        console.error("Error in .urlencode command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "urldecode",
    desc: "Decode URL encoded text.",
    category: "utility",
    filename: __filename,
}, 
async (conn, mek, m, { args, reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { noText: "‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∑í‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß URL ‡∑É‡∂Ç‡∂ö‡∑ö‡∂≠‡∑í‡∂≠ ‡∂¥‡∑ô‡∑Ö ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.", result: (decoded) => `üîì *‡∑Ä‡∑í‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑Ö ‡∂¥‡∑ô‡∑Ö:* \n${decoded}`, error: "‚ùå URL ‡∑É‡∂Ç‡∂ö‡∑ö‡∂≠‡∑í‡∂≠ ‡∂¥‡∑ô‡∑Ö ‡∑Ä‡∑í‡∂ö‡∑ö‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." },
            english: { noText: "‚ùå Please provide the URL encoded text to decode.", result: (decoded) => `üîì *Decoded Text:* \n${decoded}`, error: "‚ùå An error occurred while decoding the URL encoded text." }
        };
        const msg = messages[language] || messages.english;

        if (!args.length) return reply(msg.noText);

        const encodedText = args.join(" ");
        const decodedText = decodeURIComponent(encodedText);

        reply(msg.result(decodedText));
    } catch (e) {
        console.error("Error in .urldecode command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "roll",
    desc: "Roll a dice (1-6).",
    category: "fun",
    filename: __filename,
}, 
async (conn, mek, m, { reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { result: (num) => `üé≤ ‡∂î‡∂∂ ‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠‡∑ä‡∂≠‡∑ö: *${num}*`, error: "‚ùå ‡∂Ø‡∑è‡∂Ø‡∑î ‡∂ú‡∑ê‡∑É‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." },
            english: { result: (num) => `üé≤ You rolled: *${num}*`, error: "‚ùå An error occurred while rolling the dice." }
        };
        const msg = messages[language] || messages.english;

        const result = Math.floor(Math.random() * 6) + 1;
        reply(msg.result(result));
    } catch (e) {
        console.error("Error in .roll command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "coinflip",
    desc: "Flip a coin and get Heads or Tails.",
    category: "fun",
    filename: __filename,
}, 
async (conn, mek, m, { reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { result: (res) => `ü™ô ‡∂ö‡∑è‡∑É‡∑í‡∂∫ ‡∂¥‡∑ô‡∂ª‡∑Ö‡∑ì‡∂∏‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫: *${res === "Heads" ? "‡∂∏‡∑î‡∑Ñ‡∑î‡∂´" : "‡∂¥‡∑í‡∂ß‡∑î‡∂¥‡∑É"}*`, error: "‚ùå ‡∂ö‡∑è‡∑É‡∑í‡∂∫ ‡∂¥‡∑ô‡∂ª‡∑Ö‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." },
            english: { result: (res) => `ü™ô Coin Flip Result: *${res}*`, error: "‚ùå An error occurred while flipping the coin." }
        };
        const msg = messages[language] || messages.english;

        const result = Math.random() < 0.5 ? "Heads" : "Tails";
        reply(msg.result(result));
    } catch (e) {
        console.error("Error in .coinflip command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "flip",
    desc: "Flip the text you provide.",
    category: "fun",
    filename: __filename,
}, 
async (conn, mek, m, { args, reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { noText: "‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑ô‡∂ª‡∑Ö‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∑Ö ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.", result: (text) => `üîÑ ‡∂¥‡∑ô‡∂ª‡∑Ö‡∑ñ ‡∂¥‡∑ô‡∑Ö: *${text}*`, error: "‚ùå ‡∂¥‡∑ô‡∑Ö ‡∂¥‡∑ô‡∂ª‡∑Ö‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." },
            english: { noText: "‚ùå Please provide the text to flip.", result: (text) => `üîÑ Flipped Text: *${text}*`, error: "‚ùå An error occurred while flipping the text." }
        };
        const msg = messages[language] || messages.english;

        if (!args.length) return reply(msg.noText);

        const flippedText = args.join(" ").split('').reverse().join('');
        reply(msg.result(flippedText));
    } catch (e) {
        console.error("Error in .flip command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "pick",
    desc: "Pick between two choices.",
    category: "fun",
    filename: __filename,
}, 
async (conn, mek, m, { args, reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { noOptions: "‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂≠‡∑ù‡∂ª‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥ ‡∂Ø‡∑ô‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±. ‡∂ã‡∂Ø‡∑è: `.pick ‡∂Ö‡∂∫‡∑í‡∑É‡∑ä‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∏‡∑ä, ‡∂¥‡∑ì‡∑É‡∑è`", result: (option) => `üéâ Bot ‡∂≠‡∑ù‡∂ª‡∑è ‡∂ú‡∂≠‡∑ä‡∂≠‡∑ö: *${option}*`, error: "‚ùå ‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." },
            english: { noOptions: "‚ùå Please provide two choices to pick from. Example: `.pick Ice Cream, Pizza`", result: (option) => `üéâ Bot picks: *${option}*`, error: "‚ùå An error occurred while processing your request." }
        };
        const msg = messages[language] || messages.english;

        if (args.length < 2) return reply(msg.noOptions);

        const option = args.join(" ").split(',')[Math.floor(Math.random() * 2)].trim();
        reply(msg.result(option));
    } catch (e) {
        console.error("Error in .pick command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "timenow",
    desc: "Check the current local time.",
    category: "utility",
    filename: __filename,
}, 
async (conn, mek, m, { reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { result: (time) => `üïí ‡∑Å‡∑ä‚Äç‡∂ª‡∑ì ‡∂Ω‡∂Ç‡∂ö‡∑è‡∑Ä‡∑ö ‡∂Ø‡∑ê‡∂±‡∂ß ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä: ${time}`, error: "‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±." },
            english: { result: (time) => `üïí Current Local Time in Sri Lanka: ${time}`, error: "‚ùå An error occurred. Please try again later." }
        };
        const msg = messages[language] || messages.english;

        const now = new Date();
        const localTime = now.toLocaleTimeString("en-US", { 
            hour: "2-digit", minute: "2-digit", second: "2-digit", hour12: true, timeZone: "Asia/Colombo" // Changed to Sri Lanka time zone
        });

        reply(msg.result(localTime));
    } catch (e) {
        console.error("Error in .timenow command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "date",
    desc: "Check the current date.",
    category: "utility",
    filename: __filename,
}, 
async (conn, mek, m, { reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { result: (date) => `üìÖ ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂Ø‡∑í‡∂±‡∂∫: ${date}`, error: "‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±." },
            english: { result: (date) => `üìÖ Current Date: ${date}`, error: "‚ùå An error occurred. Please try again later." }
        };
        const msg = messages[language] || messages.english;

        const now = new Date();
        const currentDate = now.toLocaleDateString("en-US", {
            weekday: "long", year: "numeric", month: "long", day: "numeric"
        });

        reply(msg.result(currentDate));
    } catch (e) {
        console.error("Error in .date command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "shapar",
    desc: "Send shapar ASCII art with mentions.",
    category: "fun",
    filename: __filename,
}, 
async (conn, mek, m, { from, isGroup, reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { 
                notGroup: "‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫‡∂ö‡∂Ø‡∑ì ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö.", 
                noMention: "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ASCII ‡∂ö‡∂Ω‡∑è‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î mention ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.", 
                result: (user) => `üòÇ @${user.split("@")[0]}!\nüòÇ ‡∂î‡∂∂ ‡∑Ä‡∑ô‡∂±‡∑î‡∑Ä‡∑ô‡∂±‡∑ä:\n\n${`
          _______
       .-'       '-.
      /           /|
     /           / |
    /___________/  |
    |   _______ |  |
    |  |  \\ \\  ||  |
    |  |   \\ \\ ||  |
    |  |____\\ \\||  |
    |  '._  _.'||  |
    |    .' '.  ||  |
    |   '.___.' ||  |
    |___________||  |
    '------------'  |
     \\_____________\\|
`}`, 
                error: "‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±." 
            },
            english: { 
                notGroup: "This command can only be used in groups.", 
                noMention: "Please mention a user to send the ASCII art to.", 
                result: (user) => `üòÇ @${user.split("@")[0]}!\nüòÇ that for you:\n\n${`
          _______
       .-'       '-.
      /           /|
     /           / |
    /___________/  |
    |   _______ |  |
    |  |  \\ \\  ||  |
    |  |   \\ \\ ||  |
    |  |____\\ \\||  |
    |  '._  _.'||  |
    |    .' '.  ||  |
    |   '.___.' ||  |
    |___________||  |
    '------------'  |
     \\_____________\\|
`}`, 
                error: "An error occurred while processing the command. Please try again." 
            }
        };
        const msg = messages[language] || messages.english;

        if (!isGroup) return reply(msg.notGroup);

        const mentionedUser = m.message.extendedTextMessage?.contextInfo?.mentionedJid?.[0];
        if (!mentionedUser) return reply(msg.noMention);

        await conn.sendMessage(from, { text: msg.result(mentionedUser), mentions: [mentionedUser] }, { quoted: m });
    } catch (e) {
        console.error("Error in .shapar command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "rate",
    desc: "Rate someone out of 10.",
    category: "fun",
    filename: __filename,
}, 
async (conn, mek, m, { from, isGroup, reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { notGroup: "‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫‡∂ö‡∂Ø‡∑ì ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö.", noMention: "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂á‡∂ú‡∂∫‡∑ì‡∂∏‡∂ß ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î mention ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.", result: (user, rating) => `@${user.split("@")[0]} 10‡∂±‡∑ä ${rating}‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂á‡∂ú‡∂∫‡∑ô‡∂±‡∑Ä‡∑è.`, error: "‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±." },
            english: { notGroup: "This command can only be used in groups.", noMention: "Please mention someone to rate.", result: (user, rating) => `@${user.split("@")[0]} is rated ${rating}/10.`, error: "An error occurred. Please try again." }
        };
        const msg = messages[language] || messages.english;

        if (!isGroup) return reply(msg.notGroup);

        const mentionedUser = m.message.extendedTextMessage?.contextInfo?.mentionedJid?.[0];
        if (!mentionedUser) return reply(msg.noMention);

        const randomRating = Math.floor(Math.random() * 10) + 1;
        await conn.sendMessage(from, { text: msg.result(mentionedUser, randomRating), mentions: [mentionedUser] }, { quoted: m });
    } catch (e) {
        console.error("Error in .rate command:", e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "countx",
    desc: "Start a reverse countdown from the specified number to 1.",
    category: "owner",
    filename: __filename
},
async (conn, mek, m, { args, reply, senderNumber }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { 
                notOwner: "‚ùé ‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ bot ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î‡∂ß ‡∂¥‡∂∏‡∂´‡∑í.", 
                noArgs: "‚ú≥Ô∏è ‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂∏‡∑ô‡∑É‡∑ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±:\n *‡∂ã‡∂Ø‡∑è:* .countx 10", 
                invalid: "‚ùé ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª 1 ‡∑É‡∑Ñ 50 ‡∂Ö‡∂≠‡∂ª ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.", 
                start: (num) => `‚è≥ ${num} ‡∑É‡∑í‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂Ω‡∑ù‡∂∏ ‡∂ú‡∂´‡∂±‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è...`, 
                end: "‚úÖ ‡∂ú‡∂´‡∂±‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä.", 
                error: "‚ùé ‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." 
            },
            english: { 
                notOwner: "‚ùé Only the bot owner can use this command.", 
                noArgs: "‚ú≥Ô∏è Use this command like:\n *Example:* .countx 10", 
                invalid: "‚ùé Please specify a valid number between 1 and 50.", 
                start: (num) => `‚è≥ Starting reverse countdown from ${num}...`, 
                end: "‚úÖ Countdown completed.", 
                error: "‚ùé An error occurred while processing your request." 
            }
        };
        const msg = messages[language] || messages.english;

        const botOwner = conn.user.id.split(":")[0];
        if (senderNumber !== botOwner) return reply(msg.notOwner);

        if (!args[0]) return reply(msg.noArgs);

        const count = parseInt(args[0].trim());
        if (isNaN(count) || count <= 0 || count > 50) return reply(msg.invalid);

        reply(msg.start(count));

        for (let i = count; i >= 1; i--) {
            await conn.sendMessage(m.chat, { text: `${i}` }, { quoted: mek });
            await sleep(1000);
        }

        reply(msg.end);
    } catch (e) {
        console.error(e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "count",
    desc: "Start a countdown from 1 to the specified number.",
    category: "owner",
    filename: __filename
},
async (conn, mek, m, { args, reply, senderNumber }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { 
                notOwner: "‚ùé ‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ bot ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î‡∂ß ‡∂¥‡∂∏‡∂´‡∑í.", 
                noArgs: "‚ú≥Ô∏è ‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂∏‡∑ô‡∑É‡∑ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±:\n *‡∂ã‡∂Ø‡∑è:* .count 10", 
                invalid: "‚ùé ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª 1 ‡∑É‡∑Ñ 50 ‡∂Ö‡∂≠‡∂ª ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.", 
                start: (num) => `‚è≥ ${num} ‡∂Ø‡∂ö‡∑ä‡∑Ä‡∑è ‡∂ú‡∂´‡∂±‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è...`, 
                end: "‚úÖ ‡∂ú‡∂´‡∂±‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä.", 
                error: "‚ùé ‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." 
            },
            english: { 
                notOwner: "‚ùé Only the bot owner can use this command.", 
                noArgs: "‚ú≥Ô∏è Use this command like:\n *Example:* .count 10", 
                invalid: "‚ùé Please specify a valid number between 1 and 50.", 
                start: (num) => `‚è≥ Starting countdown to ${num}...`, 
                end: "‚úÖ Countdown completed.", 
                error: "‚ùé An error occurred while processing your request." 
            }
        };
        const msg = messages[language] || messages.english;

        const botOwner = conn.user.id.split(":")[0];
        if (senderNumber !== botOwner) return reply(msg.notOwner);

        if (!args[0]) return reply(msg.noArgs);

        const count = parseInt(args[0].trim());
        if (isNaN(count) || count <= 0 || count > 50) return reply(msg.invalid);

        reply(msg.start(count));

        for (let i = 1; i <= count; i++) {
            await conn.sendMessage(m.chat, { text: `${i}` }, { quoted: mek });
            await sleep(1000);
        }

        reply(msg.end);
    } catch (e) {
        console.error(e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});

cmd({
    pattern: "calculate",
    alias: ["calc"],
    desc: "Evaluate a mathematical expression.",
    category: "utilities",
    filename: __filename
},
async (conn, mek, m, { args, reply }) => {
    try {
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

        const messages = {
            sinhala: { 
                noArgs: "‚ú≥Ô∏è ‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂∏‡∑ô‡∑É‡∑ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±:\n *‡∂ã‡∂Ø‡∑è:* .calculate 5+3*2", 
                invalid: "‚ùé ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± ‡∂¥‡∑ä‚Äç‡∂ª‡∂ö‡∑è‡∑Å‡∂±‡∂∫‡∂ö‡∑í. ‡∂Ö‡∂Ç‡∂ö ‡∑É‡∑Ñ +, -, *, /, ( ) ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö.", 
                calcError: "‚ùé ‡∂ú‡∂´‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂ö‡∑è‡∑Å‡∂±‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.", 
                result: (expr, res) => `‚úÖ "${expr}" ‡∑Ñ‡∑í ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫: ${res}`, 
                error: "‚ùé ‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è." 
            },
            english: { 
                noArgs: "‚ú≥Ô∏è Use this command like:\n *Example:* .calculate 5+3*2", 
                invalid: "‚ùé Invalid expression. Only numbers and +, -, *, /, ( ) are allowed.", 
                calcError: "‚ùé Error in calculation. Please check your expression.", 
                result: (expr, res) => `‚úÖ Result of "${expr}" is: ${res}`, 
                error: "‚ùé An error occurred while processing your request." 
            }
        };
        const msg = messages[language] || messages.english;

        if (!args[0]) return reply(msg.noArgs);

        const expression = args.join(" ").trim();
        if (!/^[0-9+\-*/().\s]+$/.test(expression)) return reply(msg.invalid);

        let result;
        try {
            result = eval(expression);
        } catch (e) {
            return reply(msg.calcError);
        }

        reply(msg.result(expression, result));
    } catch (e) {
        console.error(e);
        const env = await readEnv();
        const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';
        const msg = messages[language] || messages.english;
        reply(msg.error);
    }
});
