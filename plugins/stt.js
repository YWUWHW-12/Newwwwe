const { cmd } = require('../command');
const fetch = require('node-fetch');
const { readEnv } = require('../lib/database');

cmd(
  {
    pattern: "tiktoksearch",
    alias: ["stt1", "stt"],
    desc: "Search for TikTok videos and download by selecting a number",
    react: "üéµ",
    category: "download",
    filename: __filename,
  },
  async (
    conn,
    mek,
    m,
    {
      from,
      quoted,
      body,
      isCmd,
      command,
      args,
      q,
      isGroup,
      sender,
      senderNumber,
      botNumber2,
      botNumber,
      pushname,
      isMe,
      isOwner,
      groupMetadata,
      groupName,
      participants,
      groupAdmins,
      isBotAdmins,
      isAdmins,
      reply,
    }
  ) => {
    try {
      // Config ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä LANGUAGE ‡∂ö‡∑í‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è
      const env = await readEnv();
      const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

      // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©
      const messages = {
        sinhala: {
          noQuery: "‚ùå *‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª TikTok ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∂ß query ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±!*\n*‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫:* .tiktoksearch dance",
          noResults: "‚ùå *‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω ‡∑Ñ‡∂∏‡∑î ‡∑Ä‡∑î‡∂´‡∑ö ‡∂±‡∑ê‡∑Ñ‡∑ê! ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä keyword ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*",
          listHeader: `‚ï≠‚îÅ‚îÅ‚îÅ„Äî *HASHI-MD* „Äï‚îÅ‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚ñ∏‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÉ‚ñ∏‚îÉ‡πè *TIKTOK ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω*
‚îÉ‚ñ∏‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑‡πè
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑\n\nüî¢ *‡∂ö‡∑ê‡∂∏‡∂≠‡∑í ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∂ß reply ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*\n\n`,
          listFooter: `> *‡∂ö‡∑ê‡∂∏‡∂≠‡∑í ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∂ß reply ‡∂ö‡∂ª‡∂±‡∑ä‡∂± (1-40)*\n> ‚öúÔ∏è‡∑É‡∑è‡∂Ø‡∂± ‡∂Ω‡∂Ø‡∑ä‡∂Ø‡∑ö : ¬Æùêåùêë ùêãùêÄùêäùêíùêàùêÉùêî üíö`,
          videoDetails: (title) => `‚îè‚îÅ‚ùÆüíöùêáÔøΩ{Aùêíùêáùêà ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑îüíö‚ùØ‚îÅ\n‚îÉüíö *‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä :* ${title}\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅñ£îñ£î\n\n`,
          invalidChoice: "‚ùå *‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä! 1-40 ‡∂Ö‡∂≠‡∂ª ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±.*",
          noVideoUrl: "‚ùå *‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂©‡∑Ä‡∑î‡∂±‡∑ä‡∂Ω‡∑ù‡∂©‡∑ä link ‡∂ë‡∂ö ‡∑Ñ‡∂∏‡∑î ‡∑Ä‡∑î‡∂´‡∑ö ‡∂±‡∑ê‡∑Ñ‡∑ê!*",
          videoCaption: (title) => `‚úÖ *TikTok ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑Ö‡∑è*\n*‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä:* ${title}\n> „ãõÔ∏é ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è  ·¥ç Ä   ü·¥Ä·¥ãÍú±…™·¥Ö·¥ú ·∂ú·µí·µà·µâ ≥`,
          error: (e) => `‚ùå *‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è:* ${e.message}`
        },
        english: {
          noQuery: "‚ùå *Please provide a query for TikTok search!*\n*Example:* .tiktoksearch dance",
          noResults: "‚ùå *No results found for the search! Try a different keyword.*",
          listHeader: `‚ï≠‚îÅ‚îÅ‚îÅ„Äî *HASHI-MD* „Äï‚îÅ‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚ñ∏‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÉ‚ñ∏‚îÉ‡πè *TIKTOK SEARCH RESULTS*
‚îÉ‚ñ∏‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑‡πè
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑\n\nüî¢ *Please reply with the number you want*\n\n`,
          listFooter: `> *Please reply with the number you want (1-40)*\n> ‚öúÔ∏èPowered By : ¬Æùêåùêë ùêãùêÄùêäùêíùêàùêÉùêî üíö`,
          videoDetails: (title) => `‚îè‚îÅ‚ùÆüíöùêáùêÄùêíùêáùêà ùêÉùêÑùêìùêÄùêàùêãùêíüíö‚ùØ‚îÅ\n‚îÉüíö *Title :* ${title}\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅñ£îñ£î\n\n`,
          invalidChoice: "‚ùå *Invalid number! Choose between 1-40.*",
          noVideoUrl: "‚ùå *No download link found for this video!*",
          videoCaption: (title) => `‚úÖ *TikTok Video Downloaded*\n*Title:* ${title}\n> „ãõÔ∏é ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è  ·¥ç Ä   ü·¥Ä·¥ãÍú±…™·¥Ö·¥ú ·∂ú·µí·µà·µâ ≥`,
          error: (e) => `‚ùå *An error occurred:* ${e.message}`
        }
      };

      const msg = messages[language] || messages.english; // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂ú‡∑ê‡∂Ω‡∂¥‡∑ô‡∂±‡∑ä‡∂± ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂≠‡∑ù‡∂ª‡∂±‡∑Ä‡∑è. ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä English ‡∂∫‡∂±‡∑Ä‡∑è

      if (!args[0]) return reply(msg.noQuery);

      const query = args.join(" ");
      await conn.sendMessage(from, { react: { text: "‚åõ", key: mek.key } });

      // TikTok search
      const response = await fetch(`https://api.diioffc.web.id/api/search/tiktok?query=${encodeURIComponent(query)}`);
      const data = await response.json();

      if (!data || !data.status || !data.result || data.result.length === 0) {
        await conn.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });
        return reply(msg.noResults);
      }

      // Get up to 40 results
      const videos = data.result.slice(0, 40);

      // Prepare the list
      let listText = msg.listHeader;
      videos.forEach((video, index) => {
        listText += `üî¢‚îÇ‚û™ *[REPLY NUMBER ${index + 1} ]*\n\n`;
        listText += msg.videoDetails(video.title);
      });
      listText += msg.listFooter;

      // Send the list
      const sentMsg = await conn.sendMessage(from, {
        image: { url: "https://i.ibb.co/zwhqLSQ/20250406-120212.jpg" }, // Default thumbnail
        caption: listText,
      }, { quoted: mek });

      const messageID = sentMsg.key.id;

      // Handle reply (video selection)
      const handleVideoSelection = async (messageUpdate) => {
        const replyMek = messageUpdate.messages[0];
        if (!replyMek.message) return;

        const messageType = replyMek.message.conversation || replyMek.message.extendedTextMessage?.text;
        const isReplyToSentMsg = replyMek.message.extendedTextMessage && replyMek.message.extendedTextMessage.contextInfo.stanzaId === messageID;

        if (isReplyToSentMsg) {
          const choice = parseInt(messageType) - 1;
          if (isNaN(choice) || choice < 0 || choice >= videos.length) {
            await conn.sendMessage(from, { text: msg.invalidChoice }, { quoted: replyMek });
            return;
          }

          const selectedVideo = videos[choice];
          const videoUrl = selectedVideo.media.no_watermark;

          if (!videoUrl) {
            await conn.sendMessage(from, { text: msg.noVideoUrl }, { quoted: replyMek });
            return;
          }

          // Download and send video
          await conn.sendMessage(from, { react: { text: "‚¨áÔ∏è", key: replyMek.key } });

          await conn.sendMessage(from, {
            video: { url: videoUrl },
            caption: msg.videoCaption(selectedVideo.title),
          }, { quoted: replyMek });

          await conn.sendMessage(from, { react: { text: "‚úÖ", key: replyMek.key } });

          // Cleanup: Remove listener after use
          conn.ev.removeListener('messages.upsert', handleVideoSelection);
        }
      };

      conn.ev.on('messages.upsert', handleVideoSelection);

    } catch (e) {
      console.error("[TIKTOKSEARCH ERROR]", e);
      await conn.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });
      reply(msg.error(e));
    }
  }
);
